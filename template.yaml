AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Stackery Serverless Emoji Stack
Resources:
  tiger:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-tiger
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: "\U0001F405"
      CodeUri: src/tiger
      Handler: tiger.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref EmojiTable
      Events:
        emojiGatewayGET:
          Type: Api
          Properties:
            Path: "/\U0001F405"
            Method: GET
            RestApiId: !Ref emojiGateway
      Environment:
        Variables:
          TABLE_NAME: !Ref EmojiTable
          TABLE_ARN: !GetAtt EmojiTable.Arn
    Metadata:
      StackeryName: "\U0001F405"
  squirrel:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-squirrel
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: "\U0001F43F"
      CodeUri: src/squirrel
      Handler: squirrel.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref EmojiTable
      Events:
        emojiGatewayGET:
          Type: Api
          Properties:
            Path: "/\U0001F43F"
            Method: GET
            RestApiId: !Ref emojiGateway
      Environment:
        Variables:
          TABLE_NAME: !Ref EmojiTable
          TABLE_ARN: !GetAtt EmojiTable.Arn
    Metadata:
      StackeryName: "\U0001F43F"
  llama:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-llama
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: "\U0001F999"
      CodeUri: src/llama
      Handler: llama.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref EmojiTable
      Events:
        emojiGatewayGET:
          Type: Api
          Properties:
            Path: "/\U0001F999"
            Method: GET
            RestApiId: !Ref emojiGateway
      Environment:
        Variables:
          TABLE_NAME: !Ref EmojiTable
          TABLE_ARN: !GetAtt EmojiTable.Arn
    Metadata:
      StackeryName: "\U0001F999"
  zebra:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-zebra
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: "\U0001F993"
      CodeUri: src/zebra
      Handler: zebra.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref EmojiTable
      Events:
        emojiGatewayGET:
          Type: Api
          Properties:
            Path: "/\U0001F993"
            Method: GET
            RestApiId: !Ref emojiGateway
      Environment:
        Variables:
          TABLE_NAME: !Ref EmojiTable
          TABLE_ARN: !GetAtt EmojiTable.Arn
    Metadata:
      StackeryName: "\U0001F993"
  unicorn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getWelcomePage
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: "\U0001F984"
      CodeUri: src/unicorn
      Handler: unicorn.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref EmojiTable
      Events:
        emojiGatewayPOST:
          Type: Api
          Properties:
            Path: "/\U0001F984"
            Method: POST
            RestApiId: !Ref emojiGateway
      Environment:
        Variables:
          TABLE_NAME: !Ref EmojiTable
          TABLE_ARN: !GetAtt EmojiTable.Arn
    Metadata:
      StackeryName: "\U0001F984"
  emojiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: ⛩
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          "/\U0001F993":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${zebra.Arn}/invocations
              responses: {}
          "/\U0001F984":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${unicorn.Arn}/invocations
              responses: {}
          "/\U0001F405":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tiger.Arn}/invocations
              responses: {}
          "/\U0001F999":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${llama.Arn}/invocations
              responses: {}
          "/\U0001F43F":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${squirrel.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      StackeryName: ⛩
  EmojiTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-EmojiTable
    Metadata:
      StackeryName: "\U0001F6A2"
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)